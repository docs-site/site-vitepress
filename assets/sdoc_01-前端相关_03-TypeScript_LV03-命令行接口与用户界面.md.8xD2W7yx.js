import{_ as i,c as a,o as n,am as e}from"./chunks/framework.CEE9IokS.js";const E=JSON.parse('{"title":"LV03-命令行接口与用户界面","description":"","frontmatter":{"title":"LV03-命令行接口与用户界面","date":"2025-06-19T10:46:18.000Z","icon":"famicons:logo-markdown","index":true,"tags":null,"categories":null},"headers":[],"relativePath":"sdoc/01-前端相关/03-TypeScript/LV03-命令行接口与用户界面.md","filePath":"sdoc/01-前端相关/03-TypeScript/LV03-命令行接口与用户界面.md","lastUpdated":1753109901000}'),l={name:"sdoc/01-前端相关/03-TypeScript/LV03-命令行接口与用户界面.md"};function p(t,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<p>了解一下nodejs中常用交互式命令行用户界面的集合和命令行接口。</p><h2 id="一、commander" tabindex="-1">一、commander <a class="header-anchor" href="#一、commander" aria-label="Permalink to &quot;一、commander&quot;">​</a></h2><h3 id="_1-简介" tabindex="-1">1. 简介 <a class="header-anchor" href="#_1-简介" aria-label="Permalink to &quot;1. 简介&quot;">​</a></h3><p><a href="https://commander.nodejs.cn/" target="_blank" rel="noreferrer">Commander</a> 是一个 <strong>npm</strong> 库，它帮我们封装了 <strong>解析命令行</strong> 的能力。它主要在nodejs程序运行的时候执行一次，对此次执行传入的参数解析，而<strong>不是</strong>做交互式命令行，要是想交互式的传递一些内容，这是不行的。</p><p>开发文档可以看这里：<a href="https://commander.nodejs.cn/docs/" target="_blank" rel="noreferrer">开发文档 | Commander 中文网</a></p><p>Github仓库在这里：<a href="https://github.com/tj/commander.js" target="_blank" rel="noreferrer">GitHub - tj/commander.js: node.js command-line interfaces made easy</a></p><p>开发文档和Github仓库中都为我们提供了大量的demo作为参考。</p><h3 id="_2-安装相关依赖" tabindex="-1">2. 安装相关依赖 <a class="header-anchor" href="#_2-安装相关依赖" aria-label="Permalink to &quot;2. 安装相关依赖&quot;">​</a></h3><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commander</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="二、inquirer" tabindex="-1">二、Inquirer <a class="header-anchor" href="#二、inquirer" aria-label="Permalink to &quot;二、Inquirer&quot;">​</a></h2><h3 id="_1-简介-1" tabindex="-1">1. 简介 <a class="header-anchor" href="#_1-简介-1" aria-label="Permalink to &quot;1. 简介&quot;">​</a></h3><p>上面的commander是用于解析参数的，我们想要做交互命令行呢？就是打印一些提示信息，然后用户输入一些内容，这个时候我们就可以用 <a href="https://inquirer.nodejs.cn/" target="_blank" rel="noreferrer">Inquirer</a>，它是一个常用的交互式命令行用户界面的集合。</p><p>开发文档可以看这里：<a href="https://inquirer.nodejs.cn/docs/" target="_blank" rel="noreferrer">开发文档 | Inquirer 中文网</a></p><p>Github仓库在这里：<a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noreferrer">GitHub - SBoudrias/Inquirer.js: A collection of common interactive command line user interfaces.</a></p><p>开发文档和Github仓库中都为我们提供了大量的demo作为参考。</p><h3 id="_2-安装依赖" tabindex="-1">2. 安装依赖 <a class="header-anchor" href="#_2-安装依赖" aria-label="Permalink to &quot;2. 安装依赖&quot;">​</a></h3><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @inquirer/prompts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-readline的影响" tabindex="-1">3. readline的影响 <a class="header-anchor" href="#_3-readline的影响" aria-label="Permalink to &quot;3. readline的影响&quot;">​</a></h3><h4 id="_3-1-问题现象" tabindex="-1">3.1 问题现象 <a class="header-anchor" href="#_3-1-问题现象" aria-label="Permalink to &quot;3.1 问题现象&quot;">​</a></h4><p>我之前在刚开始使用inquirer的时候写了一个登录的简单demo，但是出现了下面的问题：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 请输入用户名: aaa</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✔</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 请输入用户名:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aaa</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 请输入密码: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">********</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✔</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 请输入密码:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ********</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">登录信息验证中...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✅</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 登录成功！欢迎回来，aaa</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>但是实际上这样才是正常的：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✔</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 请输入用户名:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aaa</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✔</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 请输入密码:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ********</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">登录信息验证中...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✅</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 登录成功！欢迎回来，aaa</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>查了很久，发现屏蔽掉这个命令调用的函数 createMarkdownFile ：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加创建markdown文件的命令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">program</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //......</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createMarkdownFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename, options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;❌ 创建文档失败:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>屏蔽之后恢复正常。</p><h4 id="_3-2-原因分析" tabindex="-1">3.2 原因分析 <a class="header-anchor" href="#_3-2-原因分析" aria-label="Permalink to &quot;3.2 原因分析&quot;">​</a></h4><p>去查了各种资料，从现象看，问题出现在login命令执行时，但实际与 new 命令的执行函数 createMarkdownFile 相关。可能的原因包括有以下三点。</p><h5 id="_3-2-1-模块加载时的副作用" tabindex="-1">3.2.1 模块加载时的副作用 <a class="header-anchor" href="#_3-2-1-模块加载时的副作用" aria-label="Permalink to &quot;3.2.1 模块加载时的副作用&quot;">​</a></h5><p>cmd_create_md.ts 可能在模块加载时(import时)执行了某些初始化代码，这些代码可能修改了全局状态或process.argv等，影响了后续login命令的执行。我们可以修改如下：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">program</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  	//......</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createMarkdownFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./cmd/cmd_create_md&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createMarkdownFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename, options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;❌ 创建文档失败:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这样处理之后，问题消失，但是其实没有找到根本原因，这里这样修改避免了模块加载时的副作用影响其他命令，确保createMarkdownFile只在需要时加载，保持了原有功能完整性，可以作为一种解决方案，那有没有其他方案？</p><h5 id="_3-2-2-commander-js的命令冲突" tabindex="-1">3.2.2 Commander.js的命令冲突 <a class="header-anchor" href="#_3-2-2-commander-js的命令冲突" aria-label="Permalink to &quot;3.2.2 Commander.js的命令冲突&quot;">​</a></h5><p>可能两个命令的参数解析存在冲突，createMarkdownFile可能修改了commander的默认行为，这个其实是可以排除的，两个命令名称是不一样的。</p><h5 id="_3-2-3-异步操作问题" tabindex="-1">3.2.3 异步操作问题 <a class="header-anchor" href="#_3-2-3-异步操作问题" aria-label="Permalink to &quot;3.2.3 异步操作问题&quot;">​</a></h5><p>createMarkdownFile可能包含未正确处理的异步操作，影响了login命令的promise链。分析一下这个代码，主要的异步操作有：</p><ul><li><p>（1）confirmOverwrite函数中的readline.question</p></li><li><p>（2）整个createMarkdownFile函数是async的</p></li></ul><p>发现的问题点：</p><p>a) 模块顶层立即创建了readline实例(rl)，这会立即修改process.stdin/process.stdout，可能干扰其他命令的输入输出：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@brief</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 创建readline接口用于用户交互</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@description</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 初始化标准输入输出接口用于命令行交互</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> readline.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input: process.stdin,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: process.stdout</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这段代码使用 Node.js 的 <code>readline</code> 模块创建一个<strong>交互式命令行接口</strong>，具体功能是：建立输入/输出通道，<code>input: process.stdin</code>表示从<strong>系统标准输入流</strong>读取数据（通常是用户键盘输入），<code>output: process.stdout</code>表示将输出定向到<strong>系统标准输出流</strong>（通常是终端控制台），它的核心作用：实现<strong>逐行读取</strong>用户输入（例如用户在终端输入内容后按回车键），便于创建交互式命令行程序（如问答系统、命令行工具等）。</p><p>b) rl.close()在finally块中调用，如果函数提前return(如文件存在且不覆盖)，可能导致readline实例未正确关闭。</p><p>这些异步操作的问题表现：模块加载时就创建了readline实例，可能占用标准输入输出，影响其他命令(如login)的交互。</p><p><strong>解决方案建议</strong>：</p><ul><li>将readline实例移到函数内部</li><li>确保所有路径都正确关闭readline</li><li>避免模块加载时的副作用</li></ul><h5 id="_3-2-4-解决方案" tabindex="-1">3.2.4 解决方案 <a class="header-anchor" href="#_3-2-4-解决方案" aria-label="Permalink to &quot;3.2.4 解决方案&quot;">​</a></h5><p>移除模块顶层的readline实例，将readline实例创建移到confirmOverwrite函数内部，确保所有路径都正确关闭readline：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> confirmOverwrite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filePath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> readline.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input: process.stdin,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    output: process.stdout</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      rl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">question</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`⚠️  文件已存在: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filePath</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} 是否覆盖? (y/N) \`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">answer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(answer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;y&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="_3-3-全局变量实例总结" tabindex="-1">3.3 全局变量实例总结 <a class="header-anchor" href="#_3-3-全局变量实例总结" aria-label="Permalink to &quot;3.3 全局变量实例总结&quot;">​</a></h4><p>上面出现问题，主要是因为定义了一个全局变量实例，当一个模块（例如名为 <code>es</code> 的模块）中定义了实例对象（如全局变量实例）时，若被其他模块通过 <code>import</code> 导入，会产生以下影响：</p><ul><li>实例的初始化时机</li></ul><p>（1）首次导入时：模块的顶层代码会执行，实例对象<strong>立即被创建</strong>（例如 <code>my_instance = MyClass()</code>）。</p><p>（2）后续导入：直接从缓存加载模块，<strong>不会重新创建实例</strong>，而是复用首次创建的实例。</p><ul><li>全局单例效应</li></ul><p>该实例会成为事实上的单例：所有导入这个模块的都是<strong>同一个实例对象</strong>。在任何模块中修改该实例的状态（如 <code>es.my_instance.value = 10</code>），<strong>全局生效</strong>。</p><blockquote><p>⚠️ 风险：多个模块修改同一实例可能导致<strong>不可预料的副作用</strong>（如状态混乱）。</p></blockquote><ul><li>资源占用问题</li></ul><p>若实例的初始化涉及高成本操作（如连接数据库、加载大文件），那么首次导入时立即消耗资源。即使后续未使用该实例，资源也<strong>持续占用</strong>直到程序结束。</p>`,58)]))}const o=i(l,[["render",p]]);export{E as __pageData,o as default};
